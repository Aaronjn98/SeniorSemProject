import java.util.Random;
import java.util.Scanner;
public class RandomGenerator 
{
	/*
	 * This class is structured to create 4 functions. Each one is a Linear 
	 * Congruential Generator. hear by refered to as LCG. There is one control
	 * algorithm that shall be the basic LCG, and three modifications of the LCG
	 * These modifications in order are: Compound Randomness, Time Mod, and Simon Mod
	 * All three of theses algorithms will b expanded upon inside their respective
	 * function. The purpose of this program is to create a testable enviorment to
	 * determine and compare the quality of each modified algorithm.
	 * 
	 * All 4 methods are a variant of the LCG. Each method takes an initiger
	 * as its perameter. This determines the number of intigers generated by an 
	 * initial seed. Each int generated is thrown into a corresponding index of 
	 * an array denoted as randomArray. This array will then be returned so that 
	 * the test file is able to modify each array for each individual test
	 * 
	 * The basic LCG algorith is (a * seed + c) % m
	 * a and c are any two constants however popular choices are
	 * a = 1103515245 and c = 12345.
	 * m is a some large number. Popular choices for m are 2^16, 2^32, 
	 * and 2,147,483,647 which is the max number intiger.
	 * seed is a continuously changing number that allows for the LCG to
	 * appear random often seed = (a * seed + c) % m is used to obtain this 
	 * effect.
	 */
	public int[] LCG(int loopNumber) 
	{
		/*
		 * Most Basic form of the LCG
		 * The linear congruential generator given the same seed
		 * will always output the exact same set of strings
		 * This is refered to as Pseduo Random Number generator
		 * Thus to make an LCG work the first seed must be able 
		 * to be generated and able to be different every time
		 */
		int[] randomArray = new int[loopNumber];
		int a = 1103515245;
		int c = 12345;
		int m = 2147483647;
		int seed = 0;
			for (int i = 0; i < loopNumber; i++)
			{
				seed = (a * seed + c) % m;
				if(seed < 0) seed = seed * -1;
				randomArray[i] = seed;
			}
			return randomArray;
			
		
	}
	public int[] LCGCR(int loopNumber)
	{
		/*
		 * The first modification to the LCG is refered to as
		 * compound randomness. Hence the name LCGCR 
		 * The idea is to randomly generate
		 * the initial seed so that multiple uses of CR will
		 * result in arrays of different ints.
		 * For simplicity this algorithm uses Java's Random class
		 * as it is sufficiantly random enough.
		 * A simple hasEntered if statement is used to insure that 
		 * only the first iteration of the algorithm generates a random 
		 * seed. Every subsequent seed will be calculated through 
		 * seed = (a * seed + c) % m
		 */
	
		int[] randomArray = new int[loopNumber];
		Random rand = new Random();
		boolean hasEntered = false;
		int a = 1103515245;
		int c = 12345;
		int m = 2147483647;
		int seed = 0;
		for (int i = 0; i < loopNumber; i++)
		{
			if(hasEntered == false)
			{
				hasEntered = true;
				seed = (a * rand.nextInt(9001) + c) % (m);
			}
			else
			{
				seed = (a * seed + c) % (m);
			}	
			if(seed < 0) seed = seed * -1;
			randomArray[i] = seed;
		}
		return randomArray;
		
		
		
		
		
	}
	public int[] LCGT(int loopNumber)
	{
		/*
		 * The second modification uses the elapsed
		 * time of the program to generate a seed.
		 * For this algorithm (int)System.nanoTime() 
		 * will be used to create the initial seed
		 * The structure of this function is similar to 
		 * the structure of the first modification.
		 */
		int[] randomArray = new int[loopNumber];
		
		boolean hasEntered = false;
		int a = 1103515245;
		int c = 12345;
		int m = 2147483647;
		int seed = 0;;
		for (int i = 0; i < loopNumber; i++)
		{
			if (hasEntered == false)
			{
				hasEntered = true;
				seed = (a * (int)System.nanoTime() + c) % (m + 1);
			}	
			else 
			{
				seed = (a * seed + c) % m;
			}
			if(seed < 0) seed = seed * -1;
			randomArray[i] = seed;
		}
		return randomArray;
	}
	public int[] LCGS(int loopNumber)
	{
		/*
		 * The third modification is called the Simon Mod in
		 * referance to my cat who enjoys jumping on the 
		 * whatever keyboard I'm currently using.
		 * This function prompts the user to randomly input
		 * keys in any form the user wishes. This input is
		 * turned into a string. This function then loop through
		 * the string finding the ASCII value of each char.
		 * Every value is added together to form the initial seed.
		 * the rest of the fucntion is structured similarly to the 
		 * other two modifications
		 */
		int[] randomArray = new int[loopNumber];
		Scanner keyboard = new Scanner(System.in);
		boolean hasEntered = false;
		int a = 1103515245;
		int c = 12345;
		int m = 2147483647;
		int seed = 0;;
		int firstSeed = 0;
		System.out.println("Please input seed");
		String toSeed = keyboard.nextLine();
		for (int i = 0; i < toSeed.length(); i++)
		{
			char currentChar =  toSeed.charAt(i);
			firstSeed = firstSeed + currentChar;
		}
		for (int i = 0; i < loopNumber; i++)
		{
			if(hasEntered == false)
			{
				hasEntered = true;
				seed = (a * firstSeed + c) % m;
			}
			else
			{
				seed = (a * seed + c) % m;
			}
		if(seed < 0) seed = seed * -1;
		randomArray[i] = seed;
		}
		
		return randomArray;
	}
			
}



